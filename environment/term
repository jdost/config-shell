# Variables

# PIP
export PIP_DOWNLOAD_CACHE=$XDG_CACHE_HOME/pip
export PIP_CONFIG_FILE=$XDG_CONFIG_HOME/pip.conf
# VIRTUALENV
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
export WORKON_HOME=$HOME/.local/virtualenvs
export VIRTUALENVWRAPPER_HOOK_DIR=$HOME/.local/virtualenvs
export VIRTUALENVWRAPPER_LOG_DIR=$HOME/.local/virtualenvs
# ACK
export ACKRC=$XDG_CONFIG_HOME/ackrc
# INPUTRC
export INPUTRC=$XDG_CONFIG_HOME/inputrc
# GPG/PASSWORD STORE
export GNUPGHOME=$HOME/.local/gpg
export PASSWORD_STORE_DIR=$HOME/.local/password_store
# LESS
export LESSHISTSIZE=0

# Aliases {{{
# GREP
if which rg &>/dev/null; then
   # replace grep with ripgrep if installed
   alias grep='rg'
else
   alias grep='grep --color=auto'
fi
# LS
if which exa &>/dev/null; then
   # replace ls with exa if installed
   alias ls=' exa -l'
else
   alias ls='ls -F'
fi
# DIFF
which colordiff &>/dev/null && alias diff='colordiff'
# WEECHAT
if which weechat &>/dev/null; then
   alias weechat='weechat-curses -d $XDG_CONFIG_HOME/weechat'
   alias irc='weechat'
fi
# CAT
if which bat &>/dev/null; then
   alias cat='bat'
   export MANPAGER="sh -c 'col -bx | bat -l man -p'"
fi
# MPD
which ncmpcpp &>/dev/null && alias ncmpcpp='ncmpcpp -c $XDG_CONFIG_HOME/ncmpcpp/config'
# Clipboard
if which xclip &>/dev/null; then
   alias copy='xclip -in -selection clipboard'
   alias clipboard='xclip -out -selection clipboard'
fi

# Add the header when clearing if the header script is defined
which term_info &>/dev/null && alias clear='clear;term_info'
# Use human readable output for things
alias df="df -h"
alias du="du -h"
alias ping='ping -c 5'
# }}}

# GPG {{{
if which gpg-agent &>/dev/null; then
   if [ ! gpg-connect-agent --quiet /bye > /dev/null 2> /dev/null ]; then
      local GPG_AGENT_ENV=$GNUPGHOME/gpg-agent.env
      eval $(gpg-agent --daemon --enable-ssh-support --quiet --write-env-file $GPG_AGENT_ENV)
      chmod 600 $GPG_AGENT_ENV
      export GPG_AGENT_INFO
   fi
fi # }}}

# SSH-Agent startup {{{
if [[ "$SSH_AUTH_SOCK" == "$HOME/.ssh/auth.sock" ]]; then
   # do nothing, this should be carried over from elsewhere
elif [[ -e "$SSH_AUTH_SOCK" ]]; then
   [[ -h "$HOME/.ssh/auth.sock" ]] && rm "$HOME/.ssh/auth.sock"
   ln -s "$SSH_AUTH_SOCK" "$HOME/.ssh/auth.sock"
   export SSH_AUTH_SOCK="$HOME/.ssh/auth.sock"
else
   export SSH_AUTH_SOCK="$HOME/.ssh/auth.sock"
   if ssh-add -l &>/dev/null; then
      # do nothing, the inheritted socket is safe
   elif which gpg-agent &>/dev/null; then
      #export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR}/gnupg/S.gpg-agent.ssh"
      [[ -h "$HOME/.ssh/auth.sock" ]] && rm "$HOME/.ssh/auth.sock"
      ln -s "$(gpgconf --list-dirs agent-ssh-socket)" "$HOME/.ssh/auth.sock"
      gpgconf --launch gpg-agent
      export GPG_TTY=$(tty)
      gpg-connect-agent updatestartuptty /bye > /dev/null
   elif which ssh-agent &>/dev/null; then
      eval `ssh-agent -s` && ssh-add
      # symlink and switch to the symlink to keep a standard auth sock definition
      [[ -h "$HOME/.ssh/auth.sock" ]] && rm "$HOME/.ssh/auth.sock"
      ln -s $SSH_AUTH_SOCK "$HOME/.ssh/auth.sock"
      export SSH_AUTH_SOCK="$HOME/.ssh/auth.sock"
   fi
fi

if which gpg-agent &>/dev/null; then
   # Correct GPG settings even if there is a defined auth sock
   export GPG_TTY=$(tty)
   gpg-connect-agent updatestartuptty /bye > /dev/null
fi # }}}

# vim: ft=zsh:foldmethod=marker
