#compdef nosetests

_arguments \
  {-h,--help}'[show this help message and exit]' \
  {-V,--version}'[Output nose version and exit]' \
  {-p,--plugins}'[Output list of available plugins and exit. Combine]' \
  {-v,--verbose}'[Be more verbose. \[NOSE_VERBOSE\]]' \
  '--verbosity[Set verbosity. --verbosity=2 is the same as -v]' \
  {-q,--quiet}'[Be less verbose]' \
  {-c,--config}'[Load configuration from config file(s). May be]' \
  {-w,--where}'[Look for tests in this directory. May be specified]' \
  '--py3where[3WHERE Look for tests in this directory under Python 3.x.]' \
  {-m,--match,--testmatch}'[Files, directories, function names, and class names]' \
  '--tests[Run these tests (comma-separated list). This argument]' \
  {-l,--debug}'[Activate debug logging for one or more systems.]' \
  '--debug-log[Log debug messages to this file]' \
  {--logging-config,--log-config}'[Load logging config from this file -- bypasses all]' \
  {-I,--ignore-files}'[Completely ignore any file that matches this regular]' \
  {-e,--exclude}'[Dont run tests that match regular expression]' \
  {-i,--include}'[This regular expression will be applied to files]' \
  {-x,--stop}'[Stop running tests after the first error or failure]' \
  {-P,--no-path-adjustment}'[Dont make any changes to sys.path when loading tests]' \
  '--exe[Look for tests in python modules that are executable.]' \
  '--noexe[DO NOT look for tests in python modules that are]' \
  '--traverse-namespace[Traverse through all path entries of a namespace]' \
  {--first-package-wins,--first-pkg-wins,--1st-pkg-wins}'[noses importer will normally evict a package from]' \
  '--no-byte-compile[Prevent nose from byte-compiling the source into .pyc]' \
  {-a,--attr}'[Run only tests that have attributes specified by ATTR]' \
  {-A,--eval-attr}'[Run only tests for whose attributes the Python]' \
  {-s,--nocapture}'[Dont capture stdout (any stdout output will be]' \
  '--nologcapture[Disable logging capture plugin. Logging configuration]' \
  '--logging-format[Specify custom format to print statements. Uses the]' \
  '--logging-datefmt[Specify custom date or time format to print statements.]' \
  '--logging-filter[Specify which statements to filter in/out. By default]' \
  '--logging-clear-handlers[Clear all other logging handlers]' \
  '--logging-level[Set the log level to capture]' \
  '--with-coverage[Enable plugin Coverage Activate a coverage report]' \
  '--cover-package[Restrict coverage output to selected packages]' \
  '--cover-erase[Erase previously collected coverage statistics before]' \
  '--cover-tests[Include test modules in coverage report]' \
  '--cover-min-percentage[Minimum percentage of coverage for tests to pass]' \
  '--cover-inclusive[Include all python files under working directory in]' \
  '--cover-html[Produce HTML coverage information]' \
  '--cover-html-dir[Produce HTML coverage information in dir]' \
  '--cover-branches[Include branch coverage in coverage report]' \
  '--cover-xml[Produce XML coverage information]' \
  '--cover-xml-file[Produce XML coverage information in file]' \
  '--pdb[Drop into debugger on failures or errors]' \
  '--pdb-failures[Drop into debugger on failures]' \
  '--pdb-errors[Drop into debugger on errors]' \
  '--no-deprecated[Disable special handling of DeprecatedTest exceptions.]' \
  '--with-doctest[Enable plugin Doctest Activate doctest plugin to]' \
  '--doctest-tests[Also look for doctests in test modules. Note that]' \
  '--doctest-extension[Also look for doctests in files with this extension]' \
  '--doctest-result-variable[Change the variable name set to the result of the last]' \
  '--doctest-fixtures[Find fixtures for a doctest file in module with this]' \
  '--doctest-options[Specify options to pass to doctest. Eg.]' \
  '--with-isolation[Enable plugin IsolationPlugin Activate the isolation]' \
  {-d,--detailed-errors,--failure-detail}'[Add detail to error output by attempting to evaluate]' \
  '--no-skip[Disable special handling of SkipTest exceptions.]' \
  '--with-id[Enable plugin TestId Activate to add a test id (like]' \
  '--id-file[Store test ids found in test runs in this file.]' \
  '--failed[Run the tests that failed in the last test run.]' \
  '--processes[Spread test run among this many processes. Set a]' \
  '--process-timeout[Set timeout for return of results from each test]' \
  '--process-restartworker[If set, will restart each worker process once their]' \
  '--with-xunit[Enable plugin Xunit This plugin provides test results]' \
  '--xunit-file[Path to xml file to store the xunit report in. Default]' \
  '--xunit-testsuite-name[Name of the testsuite in the xunit xml, generated by]' \
  '--all-modules[Enable plugin AllModules Collect tests from all]' \
  '--collect-only[Enable collect-only Collect and output test names]' \
  '*:filename:_files'

# vim:ft=zsh:et:sts=2:sw=2
